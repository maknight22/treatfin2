selectInput(
"Growth",
"Lesion Growth",
choices = c("No Lesion Growth", "Insufficient Data", "Growth Observed")
),
#select input previous cancer
selectInput("Prev", "Previous Cancer", choices = c("Yes", "No")),
#text input predicted fev
textInput("FEV", "Predicted FEV"),
#select input preop symptoms
selectInput("PreOp", "Pre-Op Symptoms", choices = c("Yes", "No")),
#text input fdg-pet
textInput("fdgPET", "FDG-PET Avid")
),
mainPanel(#outPut table
tableOutput("result"))
))
im.x <- expression(
#gender to binary
if (data$gender == "Male") {
male = 1
} else{
male = 0
}
#calculate pack year spline
if (data$pky > 36) {
library(shiny)
ui <- fluidPage(# App title ----
titlePanel("TREAT 1.0"),
sidebarLayout(
sidebarPanel(
#text input for age
textInput("Age", "Age"),
#text input for BMI
textInput("BMI", "BMI"),
#select input gender
selectInput("Gender", "Gender", choices = c("Male", "Female")),
#text input pack years
textInput("PackYears", "Pack Years"),
#text input for lesion size
textInput("LesionSize", "Lesion Size(mm)"),
#text inputj for spiculated lesion edge ????
textInput("Specul", "Speculated Lesion Edge"),
#select input lesion location
selectInput(
"Location",
"Lesion Location",
choices = c("Upper Lobe", "Lower Lobe")
),
#select input lesion growth
selectInput(
"Growth",
"Lesion Growth",
choices = c("No Lesion Growth", "Insufficient Data", "Growth Observed")
),
#select input previous cancer
selectInput("Prev", "Previous Cancer", choices = c("Yes", "No")),
#text input predicted fev
textInput("FEV", "Predicted FEV"),
#select input preop symptoms
selectInput("PreOp", "Pre-Op Symptoms", choices = c("Yes", "No")),
#text input fdg-pet
textInput("fdgPET", "FDG-PET Avid")
),
mainPanel(#outPut table
tableOutput("result"))
))
im.x <- expression({
#gender to binary
if (data$gender == "Male") {
male = 1
} else{
male = 0
}
#calculate pack year spline
if (data$pky > 36) {
packye = (0.000006 * (data$pky - 36) ^ 3)
} else {
packye = 0
}
if (data$pky > 80) {
packye = packye + (0.000003 * (data$pky - 80) ^ 3)
}
#location to binary
if (data$lesloc == "Upper Lobe") {
locater = 1
} else{
locater = 0
}
#growth value calc
if (data$lesgrow == "No Lesion Growth") {
lesgrowth = 0
} else if (data$lesgrow == "Insufficient Data") {
lesgrowth = 0.259
}
else{
lesgrowth = 1.160
}
#previosu cancer to binary
if (data$prevcan == "Yes") {
precancer = 1
} else{
precancer = 0
}
#preop symp to binary
if (date$presymp == "Yes") {
symp = 1
} else{
symp = 0
}
bigx = -4.715 + (0.0533 * data$age) - (0.0262 * data$bmi) - (0.0547 * male) + (0.02338 * data$pky) - (.000003 * data$pky) ^
3 - packye + (0.0577 * data$lesionsze)
+ (0.277 * data$SpecLes) + (0.015 * locater) + lesgrowth + (0.639 * precancer) - (0.013 * data$fev) - (0.461 * symp) + (1.834 * data$fdgpet)
})
cancer.prob <- expression({
bigx = eval(im.x, data)
resulProb = exp(bigx) / (1 + exp(bigx))
})
server <- function(input, output) {
inputdata <- reactive({
data <- data.frame(
age = as.numeric(input$Age),
bmi = as.numeric(input$BMI),
gender = input$Gender,
pky = as.numeric(input$PackYears),
lesionsze = as.numeric(input$LesionSize),
SpecLes = as.numeric(input$Specul),
lesloc = input$Location,
lesgrow = input$Growth,
prevcan = input$Prev,
fev = input$FEV,
presymp = input$PreOp,
fdgpet = as.numeric(input$fdgPET)
)
data
})
output$result <- renderTable({
data = inputdata()
resulProb = eval(cancer.prob, data)
resultTable = data.frame(Result = "Probability: ",
Prob = resulProb)
resultTable
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(# App title ----
titlePanel("TREAT 1.0"),
sidebarLayout(
sidebarPanel(
#text input for age
textInput("Age", "Age"),
#text input for BMI
textInput("BMI", "BMI"),
#select input gender
selectInput("Gender", "Gender", choices = c("Male", "Female")),
#text input pack years
textInput("PackYears", "Pack Years"),
#text input for lesion size
textInput("LesionSize", "Lesion Size(mm)"),
#text inputj for spiculated lesion edge ????
textInput("Specul", "Speculated Lesion Edge"),
#select input lesion location
selectInput(
"Location",
"Lesion Location",
choices = c("Upper Lobe", "Lower Lobe")
),
#select input lesion growth
selectInput(
"Growth",
"Lesion Growth",
choices = c("No Lesion Growth", "Insufficient Data", "Growth Observed")
),
#select input previous cancer
selectInput("Prev", "Previous Cancer", choices = c("Yes", "No")),
#text input predicted fev
textInput("FEV", "Predicted FEV"),
#select input preop symptoms
selectInput("PreOp", "Pre-Op Symptoms", choices = c("Yes", "No")),
#text input fdg-pet
textInput("fdgPET", "FDG-PET Avid")
),
mainPanel(#outPut table
tableOutput("result"))
))
im.x <- expression({
#gender to binary
if (data$gender == "Male") {
male = 1
} else{
male = 0
}
#calculate pack year spline
if (data$pky > 36) {
packye = (0.000006 * (data$pky - 36) ^ 3)
} else {
packye = 0
}
if (data$pky > 80) {
packye = packye + (0.000003 * (data$pky - 80) ^ 3)
}
#location to binary
if (data$lesloc == "Upper Lobe") {
locater = 1
} else{
locater = 0
}
#growth value calc
if (data$lesgrow == "No Lesion Growth") {
lesgrowth = 0
} else if (data$lesgrow == "Insufficient Data") {
lesgrowth = 0.259
}
else{
lesgrowth = 1.160
}
#previosu cancer to binary
if (data$prevcan == "Yes") {
precancer = 1
} else{
precancer = 0
}
#preop symp to binary
if (date$presymp == "Yes") {
symp = 1
} else{
symp = 0
}
bigx = -4.715 + (0.0533 * data$age) - (0.0262 * data$bmi) - (0.0547 * male) + (0.02338 * data$pky) - (.000003 * data$pky) ^
3 - packye + (0.0577 * data$lesionsze)
+ (0.277 * data$SpecLes) + (0.015 * locater) + lesgrowth + (0.639 * precancer) - (0.013 * data$fev) - (0.461 * symp) + (1.834 * data$fdgpet)
})
cancer.prob <- expression({
bigx = eval(im.x, data)
resulProb = exp(bigx) / (1 + exp(bigx))
})
server <- function(input, output) {
inputdata <- reactive({
data <- data.frame(
age = as.numeric(input$Age),
bmi = as.numeric(input$BMI),
gender = input$Gender,
pky = as.numeric(input$PackYears),
lesionsze = as.numeric(input$LesionSize),
SpecLes = as.numeric(input$Specul),
lesloc = input$Location,
lesgrow = input$Growth,
prevcan = input$Prev,
fev = input$FEV,
presymp = input$PreOp,
fdgpet = as.numeric(input$fdgPET)
)
data
})
output$result <- renderTable({
data = inputdata()
resulProb = eval(cancer.prob, data)
resultTable = data.frame(Result = "Probability: ",
Prob = resulProb)
})
resultTable
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(# App title ----
titlePanel("TREAT 1.0"),
sidebarLayout(
sidebarPanel(
#text input for age
textInput("Age", "Age"),
#text input for BMI
textInput("BMI", "BMI"),
#select input gender
selectInput("Gender", "Gender", choices = c("Male", "Female")),
#text input pack years
textInput("PackYears", "Pack Years"),
#text input for lesion size
textInput("LesionSize", "Lesion Size(mm)"),
#text inputj for spiculated lesion edge ????
textInput("Specul", "Speculated Lesion Edge"),
#select input lesion location
selectInput(
"Location",
"Lesion Location",
choices = c("Upper Lobe", "Lower Lobe")
),
#select input lesion growth
selectInput(
"Growth",
"Lesion Growth",
choices = c("No Lesion Growth", "Insufficient Data", "Growth Observed")
),
#select input previous cancer
selectInput("Prev", "Previous Cancer", choices = c("Yes", "No")),
#text input predicted fev
textInput("FEV", "Predicted FEV"),
#select input preop symptoms
selectInput("PreOp", "Pre-Op Symptoms", choices = c("Yes", "No")),
#text input fdg-pet
textInput("fdgPET", "FDG-PET Avid")
),
mainPanel(#outPut table
tableOutput("result"))
))
im.x <- expression({
#gender to binary
if (data$gender == "Male") {
male = 1
} else{
male = 0
}
#calculate pack year spline
if (data$pky > 36) {
packye = (0.000006 * (data$pky - 36) ^ 3)
} else {
packye = 0
}
if (data$pky > 80) {
packye = packye + (0.000003 * (data$pky - 80) ^ 3)
}
#location to binary
if (data$lesloc == "Upper Lobe") {
locater = 1
} else{
locater = 0
}
#growth value calc
if (data$lesgrow == "No Lesion Growth") {
lesgrowth = 0
} else if (data$lesgrow == "Insufficient Data") {
lesgrowth = 0.259
}
else{
lesgrowth = 1.160
}
#previosu cancer to binary
if (data$prevcan == "Yes") {
precancer = 1
} else{
precancer = 0
}
#preop symp to binary
if (date$presymp == "Yes") {
symp = 1
} else{
symp = 0
}
bigx = -4.715 + (0.0533 * data$age) - (0.0262 * data$bmi) - (0.0547 * male) + (0.02338 * data$pky) - (.000003 * data$pky) ^
3 - packye + (0.0577 * data$lesionsze)
+ (0.277 * data$SpecLes) + (0.015 * locater) + lesgrowth + (0.639 * precancer) - (0.013 * data$fev) - (0.461 * symp) + (1.834 * data$fdgpet)
})
cancer.prob <- expression({
bigx = eval(im.x, data)
resulProb = exp(bigx) / (1 + exp(bigx))
})
server <- function(input, output) {
inputdata <- reactive({
data <- data.frame(
age = as.numeric(input$Age),
bmi = as.numeric(input$BMI),
gender = input$Gender,
pky = as.numeric(input$PackYears),
lesionsze = as.numeric(input$LesionSize),
SpecLes = as.numeric(input$Specul),
lesloc = input$Location,
lesgrow = input$Growth,
prevcan = input$Prev,
fev = input$FEV,
presymp = input$PreOp,
fdgpet = as.numeric(input$fdgPET)
)
data
})
output$result <- renderTable({
data = inputdata()
resulProb = eval(cancer.prob, data)
resultTable = data.frame(Result = "Probability: ",
Prob = resulProb)
})
resultTable
}
shinyApp(ui = ui, server = server)
knitr::opts_chunk$set(echo = TRUE)
library("survival")
library("survminer")
fulldat <- read.csv("data/abbot_biorepo_fulldataset.csv")
library("survival")
library("survminer")
fulldat <- read.csv("data/abbot_biorepo_fulldataset.csv")
library("survival")
library("survminer")
fulldat <- read.csv("data/abbot_biorepo_fulldataset.csv")
head(fulldat)
res.cox <- coxph(Surv(months_survive, status), data = fulldat)
res.cox <- coxph(Surv(fulldat$months_survive, fulldat$status), data = fulldat)
res.cox <- coxph(Surv(months_survive, status) ~ male, fulldat)
summary(res.cox)
res.cox <- coxph(Surv(months_survive, status), fulldat)
res.cox <- coxph(Surv(months_survive, status) ~ male, fulldat)
summary(res.cox)
ggsurvplot(survfit(res.cox), color = "#2E9FDF",
ggtheme = theme_minimal())
ggsurvplot(survfit(res.cox, fulldat), color = "#2E9FDF",
ggtheme = theme_minimal())
ggsurvplot(survfit(res.cox), data= fulldat ,color = "#2E9FDF",
ggtheme = theme_minimal(), xlim = c(0, 60))
ggsurvplot(survfit(res.cox), data= fulldat , palette = "#2E9FDF",
ggtheme = theme_minimal(), xlim = c(0, 60))
ggsurvplot(survfit(res.cox), data= fulldat , palette = "#2E9FDF",
ggtheme = theme_minimal())
#CA_125
CA125.cox <- coxph(Surv(months_survive, status) ~ strata(ab_CA125), fulldat, conf.int=TRUE)
knitr::opts_chunk$set(echo = TRUE)
#CA_125
CA125.cox <- coxph(Surv(months_survive, status) ~ ab_CA125, fulldat)
shiny::runApp('Desktop/TREAT2.0')
runApp('Desktop/oldtreat1.0')
runApp('Desktop/treat1.0')
runApp('Desktop/treat1.0')
install.packages("shinyWidgets")
runApp('Desktop/TREAT2.0')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/TREAT2.0')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
runApp('Desktop/treatfin')
